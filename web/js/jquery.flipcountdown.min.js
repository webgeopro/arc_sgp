!function($) {
    jQuery.fn.flipCountDown = jQuery.fn.flipcountdown = function(_options) {
        var default_options = {
            showHour: !0,
            showMinute: !0,
            showSecond: !0,
            am: !1,
            tzoneOffset: 0,
            speedFlip: 60,
            period: 1e3,
            tick: function() {
                return new Date();
            },
            autoUpdate: !0,
            size: "md",
            beforeDateTime: !1,
            prettyPrint: function(chars) {
                return chars instanceof Array ? chars.join(" ") : chars;
            }
        }, sizes = {
            lg: 77,
            md: 52,
            sm: 35,
            xs: 24
        }, createFlipCountDown = function($box) {
            var $flipcountdown = $('<div class="xdsoft_flipcountdown"></div>'), $clearex = $('<div class="xdsoft_clearex"></div>'), options = $.extend({}, default_options), timer = 0, _animateRange = function(box, a, b) {
                isNaN(a) ? box.css("background-position", "0px -" + (6 * (b + 1) * sizes[options.size] + 1) + "px") : _animateOne(box, a, b < a && (9 != a || 0 != b) || 0 == a && 9 == b ? -1 : 1, 9 == a && 0 == b || 0 == a && 9 == b ? 1 : Math.abs(a - b));
            }, _animateOne = function(box, a, arrow, range) {
                range < 1 || _setMargin(box, -(6 * (a + 1) * sizes[options.size] + 1), 1, arrow, function() {
                    _animateOne(box, a + arrow, arrow, range - 1);
                }, range);
            }, _setMargin = function(box, marginTop, rec, arrow, callback, range) {
                marginTop <= 66 * -sizes[options.size] && (marginTop = -(6 * sizes[options.size] + 1)), 
                box.css("background-position", "0px " + marginTop + "px"), rec <= 6 ? setTimeout(function() {
                    _setMargin(box, marginTop - arrow * sizes[options.size], ++rec, arrow, callback, range);
                }, parseInt(options.speedFlip / range)) : callback();
            }, blocks = [], _calcMoment = function() {
                var value = "1", chars = [];
                if (options.tick && (value = options.prettyPrint.call($box, options.tick instanceof Function ? options.tick.call($box, 0) : options.tick)), 
                void 0 !== value) {
                    switch (value.constructor) {
                      case Date:
                        var h = (value.getHours() + options.tzoneOffset) % (options.am ? 12 : 24);
                        options.showHour && (chars.push(parseInt(h / 10)), chars.push(h % 10)), options.showHour && (options.showMinute || options.showSecond) && chars.push(":"), 
                        options.showMinute && (chars.push(parseInt(value.getMinutes() / 10)), chars.push(value.getMinutes() % 10)), 
                        options.showMinute && options.showSecond && chars.push(":"), options.showSecond && (chars.push(parseInt(value.getSeconds() / 10)), 
                        chars.push(value.getSeconds() % 10));
                        break;

                      case String:
                        chars = value.replace(/[^0-9\:\.\s]/g, "").split("");
                        break;

                      case Number:
                        chars = value.toString().split("");
                    }
                    !function(chars) {
                        if (!(chars instanceof Array && chars.length)) return;
                        for (var i = 0, n = chars.length; i < n; i++) if (blocks[i] || (blocks[i] = $('<div class="xdsoft_digit"></div>'), 
                        $clearex.before(blocks[i])), blocks[i].data("value") != chars[i]) {
                            if (a = blocks[i].data("value"), b = chars[i], !a || !b || a != b && !/^[0-9]+$/.test(a + "" + b) && !/^[:.\s]+$/.test(a + "" + b)) switch (blocks[i].removeClass("xdsoft_separator").removeClass("xdsoft_dot"), 
                            chars[i]) {
                              case ":":
                                blocks[i].addClass("xdsoft_separator");
                                break;

                              case ".":
                                blocks[i].addClass("xdsoft_dot");
                                break;

                              case " ":
                                blocks[i].addClass("xdsoft_space");
                            }
                            if (!isNaN(chars[i])) {
                                var old = parseInt(blocks[i].data("value")), crnt = (parseInt(blocks[i].data("i")), 
                                parseInt(chars[i]));
                                _animateRange(blocks[i], old, crnt);
                            }
                            blocks[i].data("value", chars[i]), blocks[i].data("i", i);
                        }
                        var a, b;
                        if (blocks.length > chars.length) {
                            for (;i < blocks.length; i++) blocks[i][0].parentNode.removeChild(blocks[i][0]), 
                            delete blocks[i];
                            blocks.splice(chars.length);
                        }
                    }(chars);
                }
            };
            $flipcountdown.append($clearex).on("xdinit.xdsoft", function() {
                clearInterval(timer), options.autoUpdate && (timer = setInterval(_calcMoment, options.period)), 
                _calcMoment();
            }), $box.data("setOptions", function(_options) {
                if (options = $.extend(!0, {}, options, _options), sizes[options.size] || (options.size = defaulOptions.size), 
                options.beforeDateTime && !_options.tick) {
                    "string" == typeof options.beforeDateTime ? options.beforeDateTime = Math.round(new Date(options.beforeDateTime).getTime() / 1e3) : "[object Date]" !== Object.prototype.toString.call(options.beforeDateTime) && (options.beforeDateTime = Math.round(new Date().getTime() / 1e3) + 525600);
                    var nol = function(h) {
                        return 9 < h ? h : "0" + h;
                    };
                    options.tick = function() {
                        var range = options.beforeDateTime - Math.round(new Date().getTime() / 1e3), days = parseInt(range / 86400), hours = parseInt(range % 86400 / 3600), min = parseInt(range % 86400 % 3600 / 60), sec = range % 86400 % 3600 % 60;
                        return [ nol(days), nol(hours), nol(min), nol(sec) ];
                    };
                }
                $flipcountdown.addClass("xdsoft_size_" + options.size).trigger("xdinit.xdsoft");
            }), $box.append($flipcountdown);
        };
        return this.each(function() {
            var $box = $(this);
            $box.data("setOptions") || ($box.addClass("xdsoft"), createFlipCountDown($box)), 
            $box.data("setOptions") && $.isFunction($box.data("setOptions")) && $box.data("setOptions")(_options);
        });
    };
}(jQuery);